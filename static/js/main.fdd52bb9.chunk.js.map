{"version":3,"sources":["features/currentTodoId.ts","types/FilterTypes.ts","features/filter.ts","features/currentUser.ts","features/todos.ts","app/store.ts","selectors/selectors.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","app/hooks.ts","App.tsx","index.tsx"],"names":["TodoIdActionTypes","FilterTypes","FilterActionsTypes","TODO_ID_ACTIONS_CREATOR","id","type","SetTodoId","payload","RemoveTodoId","currentTodoIdReducer","state","action","setUser","user","setUserIsLoading","value","initialState","isLoading","USER_ACTIONS_CREATOR","currentUserReducer","TodosActionTypes","FILTERS_ACTIONS_CREATOR","query","SetQuery","filter","SetFilter","status","All","filterReducer","TODOS_ACTIONS_CREATOR","todos","SetTodos","SetIsLoadingTodos","todosReducer","rootReducer","combineReducers","currentTodoId","currentUser","store","createStore","composeWithDevTools","applyMiddleware","thunk","SELECTORS","title","completed","filteringByTitle","toLowerCase","includes","Active","Completed","find","todo","TodoList","dispatch","useDispatch","currentTodo","useSelector","filteredTodos","length","className","map","classNames","onClick","TodoFilter","filters","onSubmit","event","preventDefault","onChange","e","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodosApi","TodoModal","useEffect","userFS","catch","finally","href","email","name","useAppDispatch","useAppSelector","App","todosFS","Root","ReactDOM","render","document","getElementById"],"mappings":"kMAEYA,E,gEAAAA,K,8BAAAA,E,qCAAAA,M,KAeZ,ICjBYC,ECOAC,EFmBCC,EALK,SAACC,GAAD,MAAkC,CAClDC,KAAML,EAAkBM,UACxBC,QAASH,IAGED,EATQ,iBACnB,CAAEE,KAAML,EAAkBQ,eAgCbC,EAhBc,WAGP,IAFpBC,EAEmB,uDAFK,KACxBC,EACmB,uCACnB,OAAQA,EAAON,MACb,KAAKL,EAAkBM,UACrB,OAAOK,EAAOJ,QAEhB,KAAKP,EAAkBQ,aACrB,OAAO,KAET,QACE,OAAOE,I,OG7BPE,EAAU,SAACC,GAAD,MAAgC,CAC9CR,KAAM,kBACNE,QAASM,IAGLC,EAAmB,SAACC,GAAD,MAA6C,CACpEV,KAAM,2BACNE,QAASQ,IAULC,EAAe,CACnBH,KAAM,KACNI,WAAW,GAOAC,EACXN,EADWM,EAGXJ,EA+BaK,EA5BY,WAGV,IAFfT,EAEc,uDAFKM,EACnBL,EACc,uCACd,OAAQA,EAAON,MACb,IAAK,kBACH,OAAO,2BACFK,GADL,IAEEG,KAAMF,EAAOJ,UAGjB,IAAK,qBACH,OAAO,2BACFG,GADL,IAEEG,KAAM,OAGV,IAAK,2BACH,OAAO,2BACFH,GADL,IAEEO,UAAWN,EAAOJ,UAGtB,QACE,OAAOG,K,SFzEDT,K,UAAAA,E,gBAAAA,E,uBAAAA,M,cCOAC,K,4BAAAA,E,+BAAAA,M,KAUZ,IEPYkB,EFiBCC,EAVI,SAACC,GAAD,MAAoB,CACnCjB,KAAMH,EAAmBqB,SACzBhB,QAASe,IAQED,EALK,SAACG,GAAD,MAA0B,CAC1CnB,KAAMH,EAAmBuB,UACzBlB,QAASiB,IAaLR,EAAe,CACnBM,MAAO,GACPI,OAAQzB,EAAY0B,KA0BPC,EAtBO,WAGH,IAFjBlB,EAEgB,uDAFKM,EACrBL,EACgB,uCAChB,OAAQA,EAAON,MACb,KAAKH,EAAmBqB,SACtB,OAAO,2BACFb,GADL,IAEEY,MAAOX,EAAOJ,UAGlB,KAAKL,EAAmBuB,UACtB,OAAO,2BACFf,GADL,IAEEgB,OAAQf,EAAOJ,UAGnB,QACE,OAAOG,K,SEnDDU,K,2BAAAA,E,8CAAAA,M,KAWZ,IAkBaS,EAlBiB,SAACC,GAAD,MAAoC,CAChEzB,KAAMe,EAAiBW,SACvBxB,QAASuB,IAgBED,EAP0B,SACrCd,GADqC,MAEb,CACxBV,KAAMe,EAAiBY,kBACvBzB,QAASQ,IAcLC,EAA2B,CAC/Bc,MAAO,GACPb,WAAW,GAyBEgB,EAtBM,WAGH,IAFhBvB,EAEe,uDAFKM,EACpBL,EACe,uCACf,OAAQA,EAAON,MACb,KAAKe,EAAiBW,SACpB,OAAO,2BACFrB,GADL,IAEEoB,MAAOnB,EAAOJ,UAGlB,KAAKa,EAAiBY,kBACpB,OAAO,2BACFtB,GADL,IAEEO,UAAWN,EAAOJ,UAGtB,QACE,OAAOG,IChEPwB,EAAcC,0BAAgB,CAClCC,cAAe3B,EACfe,OAAQI,EACRE,MAAOG,EACPI,YAAalB,IAIFmB,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,4CC4BPC,EAzCS,SAACjC,GAAD,OAAkCA,EAAMoB,OAyCjDa,EAZU,SAACjC,GAAD,OAAmCA,EAAMc,QAYnDmB,EAvCe,SAACjC,GAC3B,IAAQoB,EAAUpB,EAAMoB,MAAhBA,MACR,EAA0BpB,EAAMc,OAAxBF,EAAR,EAAQA,MAAOI,EAAf,EAAeA,OAsBf,OApBsBI,EAAMN,QAAO,YAA2B,IAAxBoB,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACrCC,EAAmBF,EAAMG,cAAcC,SAC3C1B,EAAMyB,eAGR,OAAQrB,GACN,KAAKzB,EAAY0B,IACf,OAAOmB,EAET,KAAK7C,EAAYgD,OACf,OAAOH,IAAqBD,EAE9B,KAAK5C,EAAYiD,UACf,OAAOJ,GAAoBD,EAE7B,QACE,OAAOC,OAmBFH,EAVe,SAACjC,GAG3B,OAFkBA,EAAMoB,MAAhBA,MAEKqB,MAAK,SAAAC,GAAI,OAAIA,EAAKhD,KAAOM,EAAM0B,kBAOjCO,EAJe,SAACjC,GAAD,OAC1BA,EAAM2B,a,OCvCKgB,EAAqB,WAChC,IAAMC,EAAWC,cACXC,EAAcC,YAAYd,GAC1Be,EAAgBD,YAAYd,GAElC,OACE,mCACGe,EAAcC,OAAS,EAEpB,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGF,EAAcG,KAAI,SAAAT,GACjB,OACE,qBACE,UAAQ,OACRQ,UAAWE,IACT,CACE,6BACW,OAAXN,QAAW,IAAXA,OAAA,EAAAA,EAAapD,MAAOgD,EAAKhD,KAL/B,UAUE,oBAAIwD,UAAU,eAAd,SAA8BR,EAAKhD,KACnC,oBAAIwD,UAAU,eAAd,SACGR,EAAKP,WACJ,sBAAMe,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UACDR,EAAKP,UACD,mBACA,kBAHN,SAMGO,EAAKR,UAGV,oBAAIgB,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVvD,KAAK,SACL0D,QAAS,kBAAMT,EACbnD,EAAkCiD,EAAKhD,MAL3C,SAQE,sBAAMwD,UAAU,OAAhB,SACE,mBAAGA,WACU,OAAXJ,QAAW,IAAXA,OAAA,EAAAA,EAAapD,MAAOgD,EAAKhD,GACrB,mBACA,uBAjCPgD,EAAKhD,YA8CpB,mBAAGwD,UAAU,0BAAb,oEChFGI,EAAuB,WAClC,IAAMC,EAAUR,YAAYd,GACtBW,EAAWC,cAEjB,OACE,uBACEK,UAAU,mBACVM,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGR,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACR7C,MAAOkD,EAAQvC,OACf2C,SAAU,SAAAC,GAAC,OAAIhB,EACbjC,EAAkCiD,EAAEC,OAAOxD,SAJ/C,UAOE,wBAAQA,MAAOd,EAAY0B,IAA3B,iBACA,wBAAQZ,MAAOd,EAAYgD,OAA3B,oBACA,wBAAQlC,MAAOd,EAAYiD,UAA3B,8BAKN,oBAAGU,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRvD,KAAK,OACLuD,UAAU,QACVY,YAAY,YACZzD,MAAOkD,EAAQ3C,MACf+C,SAAU,SAACC,GAAD,OAAOhB,EACfjC,EAAiCiD,EAAEC,OAAOxD,WAG9C,sBAAM6C,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdK,EAAQ3C,OACP,sBAAMsC,UAAU,gBAAgBa,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRrE,KAAK,SACLuD,UAAU,SACVG,QAAS,kBAAMT,EACbjC,EAAiC,iBCnDpCsD,G,MAAmB,kBAC9B,qBAAKf,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASgB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,IAEMC,EAAU,SAACC,GAAD,OAAoBZ,EAAG,iBAAiBY,KAElDC,EAJW,kBAAMb,EAAY,WCb7Bc,EAAsB,WACjC,IAAMpC,EAAWC,cACXC,EAAcC,YAAYd,GAChC,EAA4Bc,YAAYd,GAAhC9B,EAAR,EAAQA,KAAMI,EAAd,EAAcA,UAad,OAXA0E,qBAAU,WACJnC,IACFF,EAASpC,GAAsC,IAE/CqE,EAAQ/B,EAAYgC,QACjBL,MAAK,SAAAS,GAAM,OAAItC,EAASpC,EAA6B0E,OACrDC,QACAC,SAAQ,kBAAMxC,EAASpC,GAAsC,UAEjE,IAGD,sBAAK0C,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEd3C,EACC,cAAC,EAAD,IAEA,sBAAK2C,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYJ,QAJZ,IAIYA,OAJZ,EAIYA,EAAapD,MAIzB,wBACEC,KAAK,SACLuD,UAAU,SACV,UAAQ,cACRG,QAAS,kBAAMT,EAASnD,WAI5B,sBAAKyD,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGJ,QADH,IACGA,OADH,EACGA,EAAaZ,QAGhB,oBAAGgB,UAAU,QAAQ,UAAQ,aAA7B,UACc,OAAXJ,QAAW,IAAXA,KAAaX,UACV,wBAAQe,UAAU,mBAAlB,kBACA,wBAAQA,UAAU,kBAAlB,qBAEH,OAEA/C,GACC,mBAAGkF,KAAI,iBAAYlF,EAAKmF,OAAxB,SACGnF,EAAKoF,oBC5DXC,EAAoC3C,IACpC4C,EAAkD1C,ICWlD2C,EAAgB,WAC3B,IAAM9C,EAAW4C,IACX1C,EAAc2C,EAAexD,GAC3B1B,EAAckF,EAAexD,GAA7B1B,UAWR,OATA0E,qBAAU,WACRrC,EAASzB,GAAmC,IAE5C4D,IACGN,MAAK,SAAAkB,GAAO,OAAI/C,EAASzB,EAA0BwE,OACnDR,QACAC,SAAQ,kBAAMxC,EAASzB,GAAmC,SAC5D,IAGD,qCACE,qBAAK+B,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACG3C,EACG,cAAC,EAAD,IAEA,cAAC,EAAD,aAOXuC,GACC,cAAC,EAAD,QC3CF8C,EAAO,kBACX,cAAC,IAAD,CAAUhE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNiE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.fdd52bb9.chunk.js","sourcesContent":["import { Maybe } from '../types/Maybe';\n\nexport enum TodoIdActionTypes {\n  SetTodoId = 'currentTodo/setId',\n  RemoveTodoId = 'currentTodo/removeId',\n}\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoIdAction = { type: TodoIdActionTypes.RemoveTodoId };\n\n// payload is a typical name for an action data\ntype SetTodoIdAction = {\n  type: TodoIdActionTypes.SetTodoId;\n  payload: number;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodoId = (): RemoveTodoIdAction => (\n  { type: TodoIdActionTypes.RemoveTodoId }\n);\n\nconst setTodoId = (id: number): SetTodoIdAction => ({\n  type: TodoIdActionTypes.SetTodoId,\n  payload: id,\n});\n\nexport const TODO_ID_ACTIONS_CREATOR = {\n  setTodoId,\n  removeTodoId,\n};\n\ntype StateCurrentId = Maybe<number>;\ntype ActionCurrentId = SetTodoIdAction | RemoveTodoIdAction;\n\nconst currentTodoIdReducer = (\n  state: StateCurrentId = null,\n  action: ActionCurrentId,\n): StateCurrentId => {\n  switch (action.type) {\n    case TodoIdActionTypes.SetTodoId:\n      return action.payload;\n\n    case TodoIdActionTypes.RemoveTodoId:\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoIdReducer;\n","export enum FilterTypes {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Action as BaseAction } from 'redux';\nimport { FilterTypes } from '../types/FilterTypes';\n\ninterface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum FilterActionsTypes {\n  SetQuery = 'filter/set_query',\n  SetFilter = 'filter/set_filter',\n}\n\nexport type SetQueryType = Action<FilterActionsTypes.SetQuery, string>;\nexport type SetFilterType = Action<FilterActionsTypes.SetFilter, FilterTypes>;\n\ntype FilterActions = SetQueryType | SetFilterType;\n\nconst setQuery = (query: string) => ({\n  type: FilterActionsTypes.SetQuery,\n  payload: query,\n});\n\nconst setFilter = (filter: FilterTypes) => ({\n  type: FilterActionsTypes.SetFilter,\n  payload: filter,\n});\n\nexport const FILTERS_ACTIONS_CREATOR = {\n  setQuery,\n  setFilter,\n};\n\nexport interface StateFilter {\n  query: string,\n  status: FilterTypes,\n}\n\nconst initialState = {\n  query: '',\n  status: FilterTypes.All,\n};\n\n// що повертає функція? Як типизувати? State?\nconst filterReducer = (\n  state: StateFilter = initialState,\n  action: FilterActions,\n): StateFilter => {\n  switch (action.type) {\n    case FilterActionsTypes.SetQuery:\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case FilterActionsTypes.SetFilter:\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Maybe } from '../types/Maybe';\nimport { User } from '../types/User';\n\ntype RemoveUserAction = { type: 'currentUser/REMOVE' };\n\ntype SetUserAction = {\n  type: 'currentUser/SET';\n  payload: User;\n};\n\ntype SetUserIsLoadingAction = {\n  type: 'currentUser/setIsLoading';\n  payload: boolean;\n};\n\nconst removeUser = (): RemoveUserAction => ({ type: 'currentUser/REMOVE' });\n\nconst setUser = (user: User): SetUserAction => ({\n  type: 'currentUser/SET',\n  payload: user,\n});\n\nconst setUserIsLoading = (value: boolean): SetUserIsLoadingAction => ({\n  type: 'currentUser/setIsLoading',\n  payload: value,\n});\n\nexport const actions = { setUser, removeUser, setUserIsLoading };\n\nexport type StateUser = {\n  user: Maybe<User>,\n  isLoading: boolean,\n};\n\nconst initialState = {\n  user: null,\n  isLoading: false,\n};\n\ntype ActionCurrentUser = SetUserAction\n| RemoveUserAction\n| SetUserIsLoadingAction;\n\nexport const USER_ACTIONS_CREATOR = {\n  setUser,\n  removeUser,\n  setUserIsLoading,\n};\n\nconst currentUserReducer = (\n  state: StateUser = initialState,\n  action: ActionCurrentUser,\n): StateUser => {\n  switch (action.type) {\n    case 'currentUser/SET':\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case 'currentUser/REMOVE':\n      return {\n        ...state,\n        user: null,\n      };\n\n    case 'currentUser/setIsLoading':\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default currentUserReducer;\n","// import { createSlice } from '@reduxjs/toolkit';\nimport { Action as BaseAction } from 'redux';\n// import { Action as BaseAction, Dispatch } from 'redux';\n// import { TodosApi } from '../api';\nimport { Todo } from '../types/Todo';\n\ninterface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum TodosActionTypes {\n  SetTodos = 'todos/set_todos',\n  SetIsLoadingTodos = 'todos/set_isLoadingTodos',\n}\n\nexport type SetTodosAction = Action<TodosActionTypes.SetTodos, Todo[]>;\nexport type SetIsLoadingAction =\nAction<TodosActionTypes.SetIsLoadingTodos, boolean>;\n\ntype TodosActions = SetTodosAction | SetIsLoadingAction;\n\nconst setTodosActionCreator = (todos: Todo[]): SetTodosAction => ({\n  type: TodosActionTypes.SetTodos,\n  payload: todos,\n});\n\n// const loadTodosAction = async (dispatch: Dispatch<TodosActions>) => {\n//   const todos = await TodosApi.getTodos();\n\n//   dispatch(setTodosActionCreator(todos));\n// };\n\nconst setIsLoadingTodosActionCreator = (\n  value: boolean,\n): SetIsLoadingAction => ({\n  type: TodosActionTypes.SetIsLoadingTodos,\n  payload: value,\n});\n\nexport const TODOS_ACTIONS_CREATOR = {\n  set: setTodosActionCreator,\n  setIsLoading: setIsLoadingTodosActionCreator,\n  // load: loadTodosAction,\n};\n\nexport interface StateTodos {\n  todos: Todo[];\n  isLoading: boolean;\n}\n\nconst initialState: StateTodos = {\n  todos: [],\n  isLoading: false,\n};\n\nconst todosReducer = (\n  state: StateTodos = initialState,\n  action: TodosActions,\n): StateTodos => {\n  switch (action.type) {\n    case TodosActionTypes.SetTodos:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case TodosActionTypes.SetIsLoadingTodos:\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoIdReducer from '../features/currentTodoId';\nimport currentUserReducer from '../features/currentUser';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodoId: currentTodoIdReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n  currentUser: currentUserReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { RootState } from '../app/store';\nimport { StateTodos } from '../features/todos';\nimport { StateUser } from '../features/currentUser';\nimport { Todo } from '../types/Todo';\nimport { FilterTypes } from '../types/FilterTypes';\nimport { StateFilter } from '../features/filter';\n\nconst todosSelector = (state: RootState): StateTodos => state.todos;\n\nconst filterTodosSelector = (state: RootState): Todo[] => {\n  const { todos } = state.todos;\n  const { query, status } = state.filter;\n\n  const filteredTodos = todos.filter(({ title, completed }) => {\n    const filteringByTitle = title.toLowerCase().includes(\n      query.toLowerCase(),\n    );\n\n    switch (status) {\n      case FilterTypes.All:\n        return filteringByTitle;\n\n      case FilterTypes.Active:\n        return filteringByTitle && !completed;\n\n      case FilterTypes.Completed:\n        return filteringByTitle && completed;\n\n      default:\n        return filteringByTitle;\n    }\n  });\n\n  return filteredTodos;\n};\n\nconst filterSelector = (state: RootState): StateFilter => state.filter;\n\nconst currentTodoSelector = (state: RootState): Todo | undefined => {\n  const { todos } = state.todos;\n\n  return todos.find(todo => todo.id === state.currentTodoId);\n};\n\nconst currentUserSelector = (state: RootState): StateUser => (\n  state.currentUser\n);\n\nexport const SELECTORS = {\n  todosSelector,\n  filterSelector,\n  filterTodosSelector,\n  currentTodoSelector,\n  currentUserSelector,\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TODO_ID_ACTIONS_CREATOR } from '../../features/currentTodoId';\nimport { SELECTORS } from '../../selectors/selectors';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentTodo = useSelector(SELECTORS.currentTodoSelector);\n  const filteredTodos = useSelector(SELECTORS.filterTodosSelector);\n\n  return (\n    <>\n      {filteredTodos.length > 0\n        ? (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {filteredTodos.map(todo => {\n                return (\n                  <tr\n                    data-cy=\"todo\"\n                    className={classNames(\n                      {\n                        'has-background-info-light':\n                        currentTodo?.id === todo.id,\n                      },\n                    )}\n                    key={todo.id}\n                  >\n                    <td className=\"is-vcentered\">{todo.id}</td>\n                    <td className=\"is-vcentered\">\n                      {todo.completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={\n                        todo.completed\n                          ? 'has-text-success'\n                          : 'has-text-danger'\n                      }\n                      >\n                        {todo.title}\n                      </p>\n                    </td>\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => dispatch(\n                          TODO_ID_ACTIONS_CREATOR.setTodoId(todo.id),\n                        )}\n                      >\n                        <span className=\"icon\">\n                          <i className={\n                            currentTodo?.id === todo.id\n                              ? 'far fa-eye-slash'\n                              : 'far fa-eye'\n                          }\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )\n        : (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FILTERS_ACTIONS_CREATOR } from '../../features/filter';\nimport { SELECTORS } from '../../selectors/selectors';\nimport { FilterTypes } from '../../types/FilterTypes';\n\nexport const TodoFilter: React.FC = () => {\n  const filters = useSelector(SELECTORS.filterSelector);\n  const dispatch = useDispatch();\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filters.status}\n            onChange={e => dispatch(\n              FILTERS_ACTIONS_CREATOR.setFilter(e.target.value as FilterTypes),\n            )}\n          >\n            <option value={FilterTypes.All}>All</option>\n            <option value={FilterTypes.Active}>Active</option>\n            <option value={FilterTypes.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filters.query}\n          onChange={(e) => dispatch(\n            FILTERS_ACTIONS_CREATOR.setQuery(e.target.value),\n          )}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filters.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(\n                FILTERS_ACTIONS_CREATOR.setQuery(''),\n              )}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n\nexport const TodosApi = {\n  getTodos,\n  getUser,\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { TODO_ID_ACTIONS_CREATOR } from '../../features/currentTodoId';\nimport { SELECTORS } from '../../selectors/selectors';\nimport { USER_ACTIONS_CREATOR } from '../../features/currentUser';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentTodo = useSelector(SELECTORS.currentTodoSelector);\n  const { user, isLoading } = useSelector(SELECTORS.currentUserSelector);\n\n  useEffect(() => {\n    if (currentTodo) {\n      dispatch(USER_ACTIONS_CREATOR.setUserIsLoading(true));\n\n      getUser(currentTodo.userId)\n        .then(userFS => dispatch(USER_ACTIONS_CREATOR.setUser(userFS)))\n        .catch()\n        .finally(() => dispatch(USER_ACTIONS_CREATOR.setUserIsLoading(false)));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(TODO_ID_ACTIONS_CREATOR.removeTodoId())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              {user && (\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport './App.scss';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { TodosApi } from './api';\nimport { TODOS_ACTIONS_CREATOR } from './features/todos';\nimport { SELECTORS } from './selectors/selectors';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(SELECTORS.currentTodoSelector);\n  const { isLoading } = useAppSelector(SELECTORS.todosSelector);\n\n  useEffect(() => {\n    dispatch(TODOS_ACTIONS_CREATOR.setIsLoading(true));\n\n    TodosApi.getTodos()\n      .then(todosFS => dispatch(TODOS_ACTIONS_CREATOR.set(todosFS)))\n      .catch()\n      .finally(() => dispatch(TODOS_ACTIONS_CREATOR.setIsLoading(false)));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}